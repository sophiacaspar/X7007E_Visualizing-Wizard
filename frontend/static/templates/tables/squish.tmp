{{define "Title"}}
	{{ .Title}}
{{end}}

{{define "Body"}}
<!DOCTYPE html>
<html>
<script src="/static/js/exampleSolutions.js"></script> 
<script src="/static/js/codeStrings.js"></script> 
<script src="/static/js/tables/squish.js"></script> 
<link href="/static/css/tables/squish.css" rel="stylesheet">
<body onload="getSquishCode(), displaySolutionCode(event, 'squishHTML')">
<div id="squish">
	<div class="row">
		<h1>SQUISH</h1>
	</div>
	<div class="row">
		<div class="col-sm-4 ">
			<div class="textbox">
				<b>Det här innebär lösningen:</b><br>
				Squish ser ut som ursprungstabellen. Ingen tabell eller rad flyttas eller ändras när webbläsaren blir mindre. I stället anpassas storleken på tabellen för att passa den nya skärmstorleken. Lösningen är överskådlig och lättläst sålänge som antalet kolumner ej överstiger 7st.
			</div>
		</div>
		<div class="col-sm-4">
			<div class="textbox">
				<b>Fördelar/nackdelar:</b><br>
				<b>+</b> Squish gör innehållet väldigt överskådligt och lättläst. <br>
				<b>+</b> Squish gör det enklare för nybörjare att få grepp om datat på en gång.<br>
				<b>-</b> Squish blir plåttrig och svårläst när det är för många kolumner.
			</div>
		</div>
		<div class="col-sm-4">
			<div class="textbox">
				<b>Tänk på att:</b><br>
				&#10148; Försök att undvika fler kolumner än ~7st. För mycket data gör att tabellen blir jobbig att läsa.<br><br>
				&#10148; Fundera om allt innehåll verkligen behöver visas i tabellen eller om det går att placera viss data någon annanstans.<br>
			</div>
		</div>
	</div>

	<div class="row">
		<div class="col-sm-4">
			<div class="row instructionbox">
				Minska webbläsarens storlek för att se resultatet.
			</div>
			<div class="row">
				<div class="tab">
					<button class="tablinks" onclick="displaySolutionCode(event, 'squishHTML')">HTML</button>
					<button class="tablinks" onclick="displaySolutionCode(event, 'squishCSS')">CSS</button>
					<button class="tablinks" onclick="displaySolutionCode(event, 'squishJS')">JS</button>
				</div>
				<div class="tableOutput">
					<textarea id="squishHTML" class="tabcontent" rows="25" cols="55"></textarea>
					<textarea id="squishCSS" class="tabcontent" rows="25" cols="55"></textarea>
					<textarea id="squishJS" class="tabcontent" rows="25" cols="55"></textarea>
				</div>
			</div>
		</div>

		<div class="col-sm-8">
			<div class="tablebox">
				<table class="responsive" data-compression="6" data-min="8" data-max="16" cellpadding=".1em" cellspacing=".2em"> 
					<tr>
					    <th>Heading 1</th>
					    <th>Heading 2</th>
					    <th>Heading 3</th>
					    <th>Heading 4</th>
					    <th>Heading 5</th>
					</tr>
					<tr>
						<td>Row 1, Col 1</td>
						<td>Row 1, Col 2</td>
						<td>Row 1, Col 3</td>
						<td>Row 1, Col 4</td>
						<td>Row 1, Col 5</td>
					</tr>
					<tr>
						<td>Row 2, Col 1</td>
						<td>Row 2, Col 2</td>
						<td>Row 2, Col 3</td>
						<td>Row 2, Col 4</td>
						<td>Row 2, Col 5</td>
					</tr>
					<tr>
						<td>Row 3, Col 1</td>
						<td>Row 3, Col 2</td>
						<td>Row 3, Col 3</td>
						<td>Row 3, Col 4</td>
						<td>Row 3, Col 5</td>
					</tr>
					<tr>
						<td>Row 4, Col 1</td>
						<td>Row 4, Col 2</td>
						<td>Row 4, Col 3</td>
						<td>Row 4, Col 4</td>
						<td>Row 4, Col 5</td>
					</tr>
					<tr>
						<td>Row 5, Col 1</td>
						<td>Row 5, Col 2</td>
						<td>Row 5, Col 3</td>
						<td>Row 5, Col 4</td>
						<td>Row 5, Col 5</td>
					</tr>
				</table>
			
			</div>
		</div>
		
		
	</div>
</div>

</body>
</html>




{{end}}